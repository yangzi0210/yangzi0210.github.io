<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于闭包、原型、原型链 你需要知道的都在这了</title>
      <link href="/2023/03/18/javascript-concept/"/>
      <url>/2023/03/18/javascript-concept/</url>
      
        <content type="html"><![CDATA[<p>一、闭包</p><p>在 JavaScript 中，我们可以随时创建函数，可以将函数作为参数传递给另一个函数，并在完全不同的代码位置进行调用。我们已经知道函数可以访问其外部的变量。</p><p>但如果在函数被创建之后，外部变量发生了变化会怎样？函数会获得新值还是旧值？如果将函数作为参数传递并在代码中的另一个位置调用它，该函数将访问的是新位置的外部变量吗？</p><p><strong>通俗的讲</strong>：就是函数a的内部函数b，被函数a外部的一个变量引用的时候，就创建了一个闭包。JS中,每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p><p><strong>作用：</strong>能够在函数定义的作用域外，使用函数定义作用域内的局部变量，并且不会污染全局。</p><p><strong>原理：</strong>基于词法作用域链和垃圾回收机制，通过维持函数作用域的引用，让函数作用域可以在当前作用域外被访问到。</p><p>一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">     var i=0;</span><br><span class="line">     function b()&#123;</span><br><span class="line">         i++;</span><br><span class="line">         alert(i);</span><br><span class="line">     &#125;</span><br><span class="line">     return b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var c = a();</span><br><span class="line">c();//1</span><br><span class="line">c();//2</span><br><span class="line">c();//3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个例子中i是函数a中的一个变量，它的值在函数b中被改变，函数b每执行一次，i的值就在原来的基础上加 1 。</p><p>因此，函数a中的i变量会一直保存在内存中。</p><p>当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会 “污染” 全局的变量时，就可以用闭包来定义这个模块。</p><p><strong>用处：</strong>它的最大用处有两个，一个是它可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>定时器</li><li>事件监听器</li><li>ajax 请求</li><li>跨窗口通信</li><li>web workers </li><li>任何其他的异步&#x2F;同步任务中</li><li>只要<strong>使用了回调函数，实际上就是使用闭包</strong>。</li><li>实现节流防抖函数</li></ul><p>另一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let num = new Array();</span><br><span class="line">for(let i=0; i&lt;4; i++)&#123;</span><br><span class="line">//闭包被调用了4次，就会生成4个独立的函数</span><br><span class="line">//每个函数内部有自己可以访问的个性化信息</span><br><span class="line">    num[i] = f1(i);</span><br><span class="line">&#125;</span><br><span class="line">function f1(n)&#123;</span><br><span class="line">     function f2()&#123;</span><br><span class="line">         alert(n);</span><br><span class="line">     &#125;</span><br><span class="line">     return f2;</span><br><span class="line">&#125;</span><br><span class="line">num[2]();//2</span><br><span class="line">num[1]();//1</span><br><span class="line">num[0]();//0</span><br><span class="line">num[3]();//3</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>① 减少全局变量；</p><p>② 减少传递函数的参数量；</p><p>③ 封装；</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>① 使用闭包会占有内存资源，过多的使用闭包会导致内存溢出等</p><p>（解决：把那些不需要的变量，但是垃圾回收又收不走的的那些赋值为null，然后让垃圾回收走）</p><h2 id="二、原型与原型链"><a href="#二、原型与原型链" class="headerlink" title="二、原型与原型链"></a>二、原型与原型链</h2><p><code>JavaScript</code> 常被描述为一种基于原型的语言——每个对象拥有一个原型对象</p><p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p><p>准确地说，这些属性和方法定义在Object的构造器函数（constructor functions）之上的<code>prototype</code>属性上，而非实例对象本身</p><p><strong>原型：</strong>每个对象都会在其内部初始化一个属性，就是prototype(原型)。通俗的说，原型就是一个模板，更准确的说是一个对象模板。</p><p><strong>原型链：</strong>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念。</p><p>通俗的说，就是利用原型让一个引用类型继承另一个引用类型的属性和方法；比如， Student → Person → Object ，学生继承人类，人类继承对象类。</p><p>原型链继承和构造函数继承的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.getName = function() &#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var animal1 = new Animal(&#x27;Kate&#x27;)</span><br><span class="line">var animal2 = new Animal(&#x27;Lucy&#x27;)</span><br><span class="line"></span><br><span class="line">//对象animal1 和 animal2共享方法getName</span><br><span class="line">animal1.getName()</span><br><span class="line">animal2.getName()</span><br><span class="line">//父类：人</span><br><span class="line">function Person () &#123;</span><br><span class="line">   this.head = &#x27;脑袋瓜子&#x27;;</span><br><span class="line">   this.emotion = [&#x27;喜&#x27;, &#x27;怒&#x27;, &#x27;哀&#x27;, &#x27;乐&#x27;]; //人都有喜怒哀乐</span><br><span class="line">&#125;</span><br><span class="line">//子类：学生，继承了“人”这个类</span><br><span class="line">function Student(studentID) &#123;</span><br><span class="line">    this.studentID = studentID;</span><br><span class="line">    Person.call(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var stu1 = new Student(1001);</span><br><span class="line">console.log(stu1.emotion); //[&#x27;喜&#x27;, &#x27;怒&#x27;, &#x27;哀&#x27;, &#x27;乐&#x27;]</span><br></pre></td></tr></table></figure><p><strong>由这里引申出关于继承的例子（几种常见的）：</strong></p><ul><li>原型链继承</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function SuperType() &#123;</span><br><span class="line">  this.b = [1, 2, 3];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubType() &#123;&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line"></span><br><span class="line">var sub1 = new SubType();</span><br><span class="line">var sub2 = new SubType();</span><br><span class="line"></span><br><span class="line">// 这里对引用类型的数据进行操作</span><br><span class="line">sub1.b.push(4);</span><br><span class="line"></span><br><span class="line">console.log(sub1.b); // [1,2,3,4]</span><br><span class="line">console.log(sub2.b); // [1,2,3,4]</span><br><span class="line">console.log(sub1 instanceof SuperType); // true</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>构造函数继承</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function SuperType(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.b = [1, 2, 3];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.say = function () &#123;</span><br><span class="line">  console.log(&quot;HZFE&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function SubType(name) &#123;</span><br><span class="line">  SuperType.call(this, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var sub1 = new SubType();</span><br><span class="line">var sub2 = new SubType();</span><br><span class="line"></span><br><span class="line">// 传递参数</span><br><span class="line">var sub3 = new SubType(&quot;Hzfe&quot;);</span><br><span class="line"></span><br><span class="line">sub1.say(); // 使用构造函数继承并没有访问到原型链，say 方法不能调用</span><br><span class="line"></span><br><span class="line">console.log(sub3.name); // Hzfe</span><br><span class="line"></span><br><span class="line">sub1.b.push(4);</span><br><span class="line"></span><br><span class="line">// 解决了原型链继承中子类实例共享父类引用属性的问题</span><br><span class="line">console.log(sub1.b); // [1,2,3,4]</span><br><span class="line">console.log(sub2.b); // [1,2,3]</span><br><span class="line">console.log(sub1 instanceof SuperType); // false</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ES6 中 class 的继承<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Pet &#123;</span><br><span class="line">  constructor(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showName() &#123;</span><br><span class="line">    console.log(&quot;调用父类的方法&quot;);</span><br><span class="line">    console.log(this.name, this.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义一个子类</span><br><span class="line">class Dog extends Pet &#123;</span><br><span class="line">  constructor(name, age, color) &#123;</span><br><span class="line">    super(name, age); // 通过 super 调用父类的构造方法</span><br><span class="line">    this.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showName() &#123;</span><br><span class="line">    console.log(&quot;调用子类的方法&quot;);</span><br><span class="line">    console.log(this.name, this.age, this.color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>还有组合继承（伪经典继承）、寄生组合式继承 不是很常见，可以自行了解。</p><p><strong>做点题练手看看学没学会：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var A=function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">A.prototype.n=1</span><br><span class="line"></span><br><span class="line">var b=new A()</span><br><span class="line"></span><br><span class="line">A.prototype=&#123;</span><br><span class="line">     n:2,</span><br><span class="line">     m:3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var c=new A()</span><br><span class="line"></span><br><span class="line">console.log(b.n,b.m,c.n,c.m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>答案</strong>：1,undefined,2,3</p><p>原因是b继承A,所以b.n就为1，而m在A中找不到，所以为undefined</p><p>以此类推，c继承的时候A添加了n和m,所以c.n和c.m分别是2和3</p><p>其中，undefined是一个表示”无”的原始值，null用来表示尚未存在的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var F=function()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Object.prototype.a=function()&#123;</span><br><span class="line">     console.log(&#x27;a()&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Function.prototype.b=function()&#123;</span><br><span class="line">     console.log(&#x27;b()&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var f=new F();</span><br><span class="line"></span><br><span class="line">f.a()//？</span><br><span class="line">f.b()//？</span><br><span class="line">F.a()//？</span><br><span class="line">F.b()//？</span><br></pre></td></tr></table></figure><p><strong>答案：</strong>a()、报错找不到b这个函数、a()、b()。</p><p>F 是个构造函数，而 F 是构造函数 Function 的一个实例。因为 F instanceof  Object &#x3D;&#x3D;&#x3D; true 、F instanceof Function &#x3D;&#x3D;&#x3D; true，由此我们可以得出结论：F 是 Object 和 Function 两个的实例，即 F 能访问到 a， 也能访问到 b。</p><p>对于 f ，f 并不是 Function 的实例，因为它本来就不是构造函数，调用的是 Function 原型链上的相关属性和方法了，只能访问到 Object 原型链。所以 f.a() 输出正常，而 f.b() 就报错</p><p>F.a 的查找路径：F 自身：没有 —&gt; F.__ proto  __ (Function.prototype)：没有—&gt; F.__ proto __ .  __ proto __(Object.prototype)：找到了输出 a()</p><p>F.b 的查找路径：F 自身：没有 —&gt; F.prototype(Function.prototype)：b()</p><p> f.a 的查找路径：f 自身：没有 —&gt; f. __ proto __ (Object.prototype)：输出 a()</p><p>f.b 的查找路径：f 自身：没有 —&gt; f. __ proto__ (Object.prototype)：没有 —&gt; f. __ proto   __ . __ proto__ (Object.prototype.__ proto__:null)：找不到，报错</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>【1】<a href="https://zhuanlan.zhihu.com/p/129022735">https://zhuanlan.zhihu.com/p/129022735</a></p><p>【2】<a href="https://zh.javascript.info/native-prototypes">原生的原型 (javascript.info)</a></p><p>【3】<a href="https://febook.hzfe.org/awesome-interview/book2/js-inherite">https://febook.hzfe.org/awesome-interview/book2/js-inherite</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
            <tag> Javascipt </tag>
            
            <tag> proto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用webpack, less, typescript, react 构建项目</title>
      <link href="/2023/03/14/develop-npm-from-zero/"/>
      <url>/2023/03/14/develop-npm-from-zero/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>🚩🚩🚩</p><p>一开始使用React写项目都是直接npx create-react-app name</p><p>但是要更好的理解npm包构建原理，能看懂别人的开源代码就要自己从头构建一个</p><p>本文使用webpack, less, typescript, react 构建项目</p><p>该项目为用hooks函数组件修改后的官方React教程中的井字棋</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>需要下载 <a href="https://link.juejin.cn/?target=https://nodejs.org/zh-cn/">node.js</a> 软件<br>创建项目目录并初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> Develop-npm-from-zero</span><br><span class="line">$ <span class="built_in">cd</span> Develop-npm-from-zero</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>cmd执行命令后一直回车键或者输入你指定的值也可以 不影响</p><h2 id="webpack环境安装配置"><a href="#webpack环境安装配置" class="headerlink" title="webpack环境安装配置"></a>webpack环境安装配置</h2><h3 id="一、安装webpack"><a href="#一、安装webpack" class="headerlink" title="一、安装webpack"></a>一、安装webpack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save-dev webpack webpack-cli html-webpack-plugin terser-webpack-plugin webpack-dev-server webpack-merge</span><br></pre></td></tr></table></figure><h3 id="二、创建-webpack-存放各种配置文件的目录"><a href="#二、创建-webpack-存放各种配置文件的目录" class="headerlink" title="二、创建 webpack 存放各种配置文件的目录"></a>二、创建 webpack 存放各种配置文件的目录</h3><p>在项目根目录新建 webpack 文件夹  用来存放其配置文件</p><p>新建 <code>webpack.base.config.js</code>、<code>webpack.dev.config.js</code>、<code>webpack.prod.config.js</code> 文件</p><h3 id="三、配置-webpack-base-config-js"><a href="#三、配置-webpack-base-config-js" class="headerlink" title="三、配置 webpack.base.config.js"></a>三、配置 <code>webpack.base.config.js</code></h3><p>暂时先配置 <code>webpack.base.config.js</code> 文件  使其可以运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, &#x27;../src/index.js&#x27;), // 入口文件，/src/index.js</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、配置-webpack-dev-config-js"><a href="#四、配置-webpack-dev-config-js" class="headerlink" title="四、配置 webpack.dev.config.js"></a>四、配置 <code>webpack.dev.config.js</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const WebpackMerge = require(&quot;webpack-merge&quot;);</span><br><span class="line">const baseWebpackConfig = require(&quot;./webpack.base.config&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = WebpackMerge.merge(baseWebpackConfig, &#123;</span><br><span class="line">  // 指定构建环境</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">  plugins: [</span><br><span class="line">    // 配置输出的HTML</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: &quot;index.html&quot;,</span><br><span class="line">      template: &quot;public/index.html&quot;,</span><br><span class="line">      inject: true</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  // 开发环境本地启动的服务配置</span><br><span class="line">  devtool: &#x27;eval-source-map&#x27;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &#x27;localhost&#x27;,</span><br><span class="line">    port: 3000,</span><br><span class="line">    // 要求每次都返回HTML，不配置会出现can not GET/</span><br><span class="line">    historyApiFallback: true,</span><br><span class="line">    hot: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="五、创建src文件夹"><a href="#五、创建src文件夹" class="headerlink" title="五、创建src文件夹"></a>五、创建src文件夹</h3><p>在项目根目录创建src文件夹，作为存放业务代码的地方</p><p>然后创建 <code>index.js</code> 文件，作为打包的入口文件</p><h3 id="六、创建启动命令"><a href="#六、创建启动命令" class="headerlink" title="六、创建启动命令"></a>六、创建启动命令</h3><p>在 <code>package.json</code> 的 <code>scripts</code> 中，创建命令：</p><ul><li><code>start</code> 为本地开发启动的命令</li><li><code>build</code> 是打包项目的命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">      &quot;start&quot;: &quot;webpack-dev-server --config webpack/webpack.dev.config.js --open&quot;,</span><br><span class="line">      &quot;build&quot;: &quot;webpack --config webpack/webpack.prod.config.js&quot;,</span><br><span class="line">      &quot;test&quot;: &quot;echo &quot;Error: no test specified&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、启动本地开发环境"><a href="#七、启动本地开发环境" class="headerlink" title="七、启动本地开发环境"></a>七、启动本地开发环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><h2 id="安装配置-React环境"><a href="#安装配置-React环境" class="headerlink" title="安装配置 React环境"></a>安装配置 React环境</h2><h3 id="安装-React"><a href="#安装-React" class="headerlink" title="安装 React"></a>安装 React</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save react react-dom</span><br></pre></td></tr></table></figure><h3 id="安装-babel"><a href="#安装-babel" class="headerlink" title="安装 babel"></a>安装 babel</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev @babel/core babel-loader @babel/preset-env @babel/preset-react @babel/plugin-transform-runtime @babel/runtime-corejs3</span><br></pre></td></tr></table></figure><ul><li>在项目根目录创建 babel.config.js 文件，用来配置 babel</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    &#x27;@babel/preset-env&#x27;,</span><br><span class="line">    &#x27;@babel/preset-react&#x27;</span><br><span class="line">  ],</span><br><span class="line">  plugins: [ // 插件</span><br><span class="line">    [</span><br><span class="line">      &#x27;@babel/plugin-transform-runtime&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x27;corejs&#x27;: 3</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改 webpack 配置  使其使用 babel-loader 处理 JSX 语法</li><li>修改 webpack.base.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">const resolve = (link) =&gt; path.resolve(__dirname, link);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, &#x27;../src/index.jsx&#x27;),</span><br><span class="line">  module: &#123; // 模块</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.jsx$/,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;babel-loader&#x27;, // 使用 babel-loader</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        include: [resolve(&#x27;../src&#x27;)],</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改 index.js 为 index.jsx，以JSX格式重写里面代</li></ul><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>成功运行！</p><h2 id="安装配置loader环境"><a href="#安装配置loader环境" class="headerlink" title="安装配置loader环境"></a>安装配置loader环境</h2><h3 id="安装各种-loader环境"><a href="#安装各种-loader环境" class="headerlink" title="安装各种 loader环境"></a>安装各种 loader环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev css-loader style-loader url-loader post-loader less less-loader autoprefixer</span><br></pre></td></tr></table></figure><ul><li>重新配置 webpack.base.config.js文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">const lessRegex = /.less$/;</span><br><span class="line">const lessModuleRegex = /.module.less$/;</span><br><span class="line">const resolve = (link) =&gt; path.resolve(__dirname, link);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, &#x27;../src/index.jsx&#x27;),</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.jsx$/,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;babel-loader&#x27;,</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        include: [resolve(&#x27;../src&#x27;)],</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.css$/,</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">        use: [</span><br><span class="line">          // 注意loader生效是从下往上的</span><br><span class="line">          &#x27;style-loader&#x27;,</span><br><span class="line">          &#x27;css-loader&#x27;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: lessRegex,</span><br><span class="line">        exclude: lessModuleRegex,</span><br><span class="line">        use: [</span><br><span class="line">          &#x27;style-loader&#x27;,</span><br><span class="line">          &#x27;css-loader&#x27;,</span><br><span class="line">          &#x27;postcss-loader&#x27;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;less-loader&#x27;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: lessModuleRegex,</span><br><span class="line">        use: [</span><br><span class="line">          &#x27;style-loader&#x27;,</span><br><span class="line">          &#x27;css-loader&#x27;,</span><br><span class="line">          &#x27;postcss-loader&#x27;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;less-loader&#x27;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.(png|jpe?g|gif|svg)(?.*)?$/,</span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: &#x27;url-loader&#x27;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            //1024 == 1kb</span><br><span class="line">            //小于10kb时打包成base64编码的图片否则单独打包成图片</span><br><span class="line">            limit: 10240,</span><br><span class="line">            name: path.join(&#x27;img/[name].[hash:7].[ext]&#x27;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.(woff2?|eot|ttf|otf)(?.*)?$/,</span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: &#x27;url-loader&#x27;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: 10240,</span><br><span class="line">            name: path.join(&#x27;font/[name].[hash:7].[ext]&#x27;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（可选）</p><p>这里安装了 postcss-loader 作用是自动补全 css 前缀</p><p>需要配置 postcss-loader 使其生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-loader</span><br><span class="line">npm i -D autoprefixer</span><br></pre></td></tr></table></figure><p>方法类似babel 在项目目录新建 postcss.config.js  写入代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    require(&#x27;autoprefixer&#x27;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 src 下新建 global.less并写入样式，然后在 index.jsx 中引入进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./global.less&#x27;;</span><br></pre></td></tr></table></figure><h2 id="测试目前代码"><a href="#测试目前代码" class="headerlink" title="测试目前代码"></a>测试目前代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>项目运行成功且可以正常加载 .less 文件！</p><h2 id="安装配置-typescript环境"><a href="#安装配置-typescript环境" class="headerlink" title="安装配置 typescript环境"></a>安装配置 typescript环境</h2><h3 id="安装-typescript"><a href="#安装-typescript" class="headerlink" title="安装 typescript"></a>安装 typescript</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save typescript</span><br><span class="line">$ npm install --save-dev @babel/preset-typescript @types/react</span><br></pre></td></tr></table></figure><h3 id="配置-typescript环境"><a href="#配置-typescript环境" class="headerlink" title="配置 typescript环境"></a>配置 typescript环境</h3><ul><li>修改 babel.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    &#x27;@babel/preset-env&#x27;,</span><br><span class="line">    &#x27;@babel/preset-react&#x27;,</span><br><span class="line">    &#x27;@babel/preset-typescript&#x27;</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &#x27;@babel/plugin-transform-runtime&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x27;corejs&#x27;: 3</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改 webpack.base.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // ...</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">              test: /.(j|t)sx?$/,  //-------修改一</span><br><span class="line">              use: [</span><br><span class="line">                &#123;</span><br><span class="line">                  loader: &#x27;babel-loader&#x27;,</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              include: [resolve(&#x27;../src&#x27;)],</span><br><span class="line">              exclude: /node_modules/</span><br><span class="line">            &#125;</span><br><span class="line">            // ...</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123; //----------------------------修改二</span><br><span class="line">      extensions: [&#x27;.ts&#x27;, &#x27;.tsx&#x27;, &#x27;.js&#x27;, &#x27;.jsx&#x27;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加 typescript 配置文件</li><li>新建 tsconfig.json 配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    /* Basic Options */</span><br><span class="line">    &quot;target&quot;: &quot;es5&quot;,                          /* Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27; or &#x27;ESNEXT&#x27;. */</span><br><span class="line">    &quot;module&quot;: &quot;esnext&quot;,                       /* Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, or &#x27;ESNext&#x27;. */</span><br><span class="line">    &quot;lib&quot;: [</span><br><span class="line">      &quot;dom&quot;,</span><br><span class="line">      &quot;dom.iterable&quot;,</span><br><span class="line">      &quot;esnext&quot;</span><br><span class="line">    ],                                        /* Specify library files to be included in the compilation. */</span><br><span class="line">    &quot;allowJs&quot;: true,                          /* Allow javascript files to be compiled. */</span><br><span class="line">    &quot;jsx&quot;: &quot;react&quot;,                           /* Specify JSX code generation: &#x27;preserve&#x27;, &#x27;react-native&#x27;, or &#x27;react&#x27;. */</span><br><span class="line">    &quot;sourceMap&quot;: true,                        /* Generates corresponding &#x27;.map&#x27; file. */</span><br><span class="line">    &quot;outDir&quot;: &quot;./dist&quot;,                       /* Redirect output structure to the directory. */</span><br><span class="line">    &quot;isolatedModules&quot;: false,                  /* Transpile each file as a separate module (similar to &#x27;ts.transpileModule&#x27;). */</span><br><span class="line">    &quot;resolveJsonModule&quot;: true,</span><br><span class="line">    &quot;forceConsistentCasingInFileNames&quot;: true,</span><br><span class="line">    &quot;skipLibCheck&quot;: true,</span><br><span class="line">    &quot;strict&quot;: true,                           /* Enable all strict type-checking options. */</span><br><span class="line">    &quot;noImplicitThis&quot;: true,                   /* Raise error on &#x27;this&#x27; expressions with an implied &#x27;any&#x27; type. */</span><br><span class="line">    &quot;noImplicitReturns&quot;: true,                /* Report error when not all code paths in function return a value. */</span><br><span class="line">    &quot;moduleResolution&quot;: &quot;node&quot;,               /* Specify module resolution strategy: &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; (TypeScript pre-1.6). */</span><br><span class="line">    &quot;baseUrl&quot;: &quot;.&quot;,                       /* Base directory to resolve non-absolute module names. */</span><br><span class="line">    &quot;allowSyntheticDefaultImports&quot;: true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */</span><br><span class="line">    &quot;esModuleInterop&quot;: true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies &#x27;allowSyntheticDefaultImports&#x27;. */</span><br><span class="line">    &quot;experimentalDecorators&quot;: true,           /* Enables experimental support for ES7 decorators. */</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;include&quot;: [</span><br><span class="line">    &quot;src&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;exclude&quot;: [</span><br><span class="line">    &quot;node_modules&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>tsconfig.json</code> 更多的配置说明</p><p>查看：<a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html">https://www.tslang.cn/docs/handbook/tsconfig-json.html</a></p><p>到此 typescript的环境配置完成，可自行修改 src 下的文件为 tsx并重写来进行测试。</p><h2 id="配置生产环境"><a href="#配置生产环境" class="headerlink" title="配置生产环境"></a>配置生产环境</h2><p>修改 webpack&#x2F;webpack.prod.config.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const WebpackMerge = require(&quot;webpack-merge&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const baseWebpackConfig = require(&quot;./webpack.base.config&quot;);</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">const TerserPlugin = require(&#x27;terser-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = WebpackMerge.merge(baseWebpackConfig, &#123;</span><br><span class="line">  // 指定构建环境</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">  // 输出位置</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &quot;[name].bundle.js&quot;,</span><br><span class="line">    path: path.join(__dirname, &#x27;./../dist&#x27;),</span><br><span class="line">    chunkFilename: &quot;[chunkhash:8].js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 插件</span><br><span class="line">  plugins: [</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: &quot;index.html&quot;,</span><br><span class="line">      template: &quot;public/index.html&quot;,</span><br><span class="line">      inject: true, // true：默认值，script标签位于html文件的 body 底部</span><br><span class="line">      hash: true, // 在打包的资源插入html会加上hash</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: true,               //去注释</span><br><span class="line">        collapseWhitespace: true,           //压缩空格</span><br><span class="line">        removeAttributeQuotes: true         //去除属性引用</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimize: true,</span><br><span class="line">    minimizer: [</span><br><span class="line">      new TerserPlugin(&#123;</span><br><span class="line">        extractComments: false, // 不将注释提取到单独文件中</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>发现运行完毕会在根目录下产生 dist 文件夹格式如下</p><p>即为打包后的文件  </p><p>现在可以直接运行 index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- dist</span><br><span class="line">    |-- index.html</span><br><span class="line">    |-- main.bundle.js</span><br></pre></td></tr></table></figure><p>到此，已经完成了react + webpack +less+typescript 构建自己的项目的整个过程！</p><p><img src="https://s1.ax1x.com/2023/03/14/ppl7LSH.png"></p><h2 id="最终目录结构"><a href="#最终目录结构" class="headerlink" title="最终目录结构"></a>最终目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">|-- Develop-npm-from-zero</span><br><span class="line">    |-- babel.config.js</span><br><span class="line">    |-- package-lock.json</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- postcss.config.js</span><br><span class="line">    |-- tsconfig.json</span><br><span class="line">    |-- node_modules</span><br><span class="line">    |-- dist</span><br><span class="line">    |   |-- index.html</span><br><span class="line">    |   |-- main.bundle.js</span><br><span class="line">    |-- public</span><br><span class="line">    |   |-- index.html</span><br><span class="line">    |-- src</span><br><span class="line">    |   |-- global.less</span><br><span class="line">    |   |-- index.jsx</span><br><span class="line">    |   |-- pages</span><br><span class="line">    |       |-- Home</span><br><span class="line">    |           |-- index.tsx</span><br><span class="line">    |-- webpack</span><br><span class="line">        |-- webpack.base.config.js</span><br><span class="line">        |-- webpack.dev.config.js</span><br><span class="line">        |-- webpack.prod.config.js</span><br></pre></td></tr></table></figure><h2 id="报错解决方法"><a href="#报错解决方法" class="headerlink" title="报错解决方法"></a>报错解决方法</h2><h3 id="Module-not-found-Error-Can-t-resolve-postcss-loader-xxx"><a href="#Module-not-found-Error-Can-t-resolve-postcss-loader-xxx" class="headerlink" title="Module not found: Error: Can t resolve  postcss-loader xxx"></a>Module not found: Error: Can t resolve  postcss-loader xxx</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -i install postcss-loader</span><br></pre></td></tr></table></figure><h3 id="Error-Cannot-find-module-‘clean-webpack-plugin’"><a href="#Error-Cannot-find-module-‘clean-webpack-plugin’" class="headerlink" title="Error: Cannot find module ‘clean-webpack-plugin’"></a>Error: Cannot find module ‘clean-webpack-plugin’</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -i install clean-webpack-plugin</span><br></pre></td></tr></table></figure><h3 id="Module-not-found-Error-Can’t-resolve-‘react-dom-x2F-client’-in"><a href="#Module-not-found-Error-Can’t-resolve-‘react-dom-x2F-client’-in" class="headerlink" title="Module not found: Error: Can’t resolve ‘react-dom&#x2F;client’ in"></a>Module not found: Error: Can’t resolve ‘react-dom&#x2F;client’ in</h3><p>原先的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">import ReactDOM from &#x27;react-dom/client&#x27;;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&quot;root&quot;));</span><br><span class="line">root.render(&lt;Game /&gt;);</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">import ReactDom from &#x27;react-dom&#x27;;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">ReactDom.render(&lt;Game /&gt;,document.getElementById(&quot;root&quot;));</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7065518734433058847">https://juejin.cn/post/7065518734433058847</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPM </tag>
            
            <tag> React </tag>
            
            <tag> Wbepack </tag>
            
            <tag> less </tag>
            
            <tag> Typescript </tag>
            
            <tag> JSX </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>潜艇智能考核评判系统开发</title>
      <link href="/2023/02/01/examineSystem/"/>
      <url>/2023/02/01/examineSystem/</url>
      
        <content type="html"><![CDATA[<h2 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h2><p>​        本智能考核评判系统主要用于潜艇操纵训练模拟器下，教练员对学员进行相关科目的训练与考核。</p><p>​        要求潜艇操纵训练模拟器与主操纵台进行数据通信，并将主操纵台发送的数据显示在软件上。考核的相关数据通过界面显示出来。同时软件能够进行语音识别和声纹识别，不仅能识别人员所说的内容，还能识别人员的身份，对指令和人员身份的识别有较高的准确度。结合语音识别功能，软件能够进行智能考核评判，跟据识别的语音和身份，结合考核科目的需求，做到自动进行给学员操作评分的需求。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p><strong>功能性需求：</strong></p><p>1.考核人员、管理人员登陆注册功能</p><p>2.考核人员信息录入功能（声纹、艇队、战位）</p><p>3.权限设置功能：考核人员仅能参与考核评判过程、管理人员可以查看历史记录、进行机器学习、人员修改等操作。</p><p>4.考核结果的自动评判功能：系统能够根据指令、传感器参数的变化、考核用时等参数进行准确的自动打分。</p><p>5.语音指令的识别以及分句功能：能够通过录音设备，将采集到的语音指令进行语音识别成一句一句话，并将识别结果显示到软件界面中。</p><p>6.考核人员身份识别功能：声纹识别，通过录音设备，将采集到的语音进行身份识别，判别是由哪位人员说话，并将其显示到软件界面上。</p><p>7.机器学习：系统能够根据录制的语音指令集训练语音识别模型和声纹识别模型，并能保存、调用模型。</p><p>8.传感器参数展示：把收到的数据包进行处理以一定形式实时地展现在界面上。</p><p>9.历史记录读取功能：能保存潜艇操纵训练历史数据，依据用户需求随时查看之前的考核评判整个过程。</p><p><strong>非功能性需求：</strong></p><p>1.性能需求：语音指令识别率大于85%，耗时小于1s。</p><p>2.性能需求：人员身份识别准确率大于90%，耗时小于1s。</p><p>3.性能需求：考核智能综合评判打分正确率大于90%。</p><p>4.易用性：系统界面简单、易于操作控制，每个功能操作步骤小于5次。</p><p>5.可靠性：系统的平均无故障时间大于30天。</p><p>6.安全性：系统在各种突发情况下能够保存当前正在考核的数据。</p><p>7.保密性：系统数据加密保护，保证采集、传输、处理过程中不被偷窥窃取篡改。</p><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>一、在系统的数据通信实现的技术中，采用UDP协议。</p><p>1.每一条TCP连接只能是点到点的；而UDP不建立连接，所以可以支持一对一，一对多，多对一和多对多的交互通信，也就是可以同时接受多个人的包。</p><p>2.TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流，由于连接的问题，当网络出现波动时，连接可能出现响应问题；UDP是面向报文的，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低。</p><p>3.UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信。</p><p>二、在交互界面的实现中，采用QT框架来进行开发。在本项目中，我们使用PyQt5作为前端界面的开发框架。Qt 是一个跨平台的C++应用程序开发框架。</p><p>它提供给开发者建立图形用户界面所需的功能。Qt是完全面向对象的，很容易扩展，并且允许真正地组件编程。Qt不但拥有了完备的C++图形库，而且近年来的版本逐渐集成了数据库、OpenGL库、多媒体库、网路、脚本库、XML库、WebKit库等等，其核心库也加入了进程间通信、多线程等模块，极大地丰富了Qt开发大规模复杂跨平台应用程序的能力。而且考虑到可能会有打包成exe可执行文件，画曲线图等等需求，pyqt5显得更加合适。</p><p>三、在智能语音识别技术中，声学模型采用DFCNN-BLSTM模型，语言学模型采用Transformer模型，声纹识别模型采用CNN-BLSTM模型，并进行大量的实验验证其识别的可行性。</p><p>四、在考核智能评判中，采用SQLite存储历史记录。只是单机上用的，数据量不是很大，需要方便移植或者需要频繁读&#x2F;写磁盘文件。一个应用使用SQLite时，它的功能直接被集成在其中，应用会直接访问包含数据的文件(即SQLite数据库),而不是通过一些端口(port, socket)来交互，SQLite相对非常快速、简单和高效。</p><h2 id="项目周期"><a href="#项目周期" class="headerlink" title="项目周期"></a>项目周期</h2><p><strong>2022.06-2022.07</strong></p><p>对系统进行需求分析以及系统的建模，考虑到各种功能性、非功能性需求，确定采用的技术方案和整体框架结构。</p><p><strong>2022.07-2022.11</strong> </p><p>进行系统界面的开发，各项功能的开发、对软件的实地测试，中期验收、定期与甲方碰面进行需求的增删修改，最终使得系统可以满足甲方各种需求、成功运行。</p><p><strong>2022.11-2022.12</strong> </p><p>完成系统技术方案、测试文档、使用说明书等相关的撰写，完成系统的验收，准备后续实际投入使用的相关工作。</p><h2 id="开发过程中问题"><a href="#开发过程中问题" class="headerlink" title="开发过程中问题"></a>开发过程中问题</h2><p>1.曲线图无法长期显示，约10多秒即卡死。（曲线问题）</p><p>起初看曲线画大概10几秒图就卡死，画出曲线的形状也不对，觉得可能是Pyqt5的图表控件Qchart问题，搜了一些相关解决方案并尝试，尝试加了一些加速的接口比如openGL（）等等效果不明显。于是觉得不会是控件的问题，应该是接受上位机数据的问题。对发送端进行检测，发现发端机器一秒钟会发1000次左右重复的数据，操纵机器导致相关参数的变化后，每个值都会重复很多次，因此曲线上显示的一个点其实有很多重合在一起，累计十几秒一张图上已经有很多很多的点了，所以才会卡死。实际接受数据的刷新频率大概1s一次即可，但UDP是阻塞发送的，仅仅设置一秒读取一次会一直读取缓冲池里的重复的1000个数据才会读到下一秒的，因此想到一个简单的解决方案，将缓冲池设置为帧长*2-1，保证能接受一个完整帧的同时，不会一直重复读到上一秒的无用重复帧，导致曲线一直是直线。</p><p>（还怀疑过是不同语言、操作系统等对帧封装的格式有点问题，虽然都是UDP协议,因为上位机代码猜测应该是C++写的还可能是linux，后面要了一下上位机发的报文段用工具截取一个字节一个字节对，python确实尾部多了个CC，但是后面也实际模拟测试下没有影响。）</p><p>2.完善并优化一些相关功能。</p>]]></content>
      
      
      <categories>
          
          <category> 智能化系统开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
            <tag> 声纹识别 </tag>
            
            <tag> python </tag>
            
            <tag> Pyqt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode100(1-5 no-hard)</title>
      <link href="/2023/01/14/leetcode100-1-5/"/>
      <url>/2023/01/14/leetcode100-1-5/</url>
      
        <content type="html"><![CDATA[<h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a><strong>1.两数之和</strong></h3><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; map;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> it=map.<span class="built_in">find</span>(target-nums[i]);</span><br><span class="line">        <span class="keyword">if</span>(it!=map.<span class="built_in">end</span>())</span><br><span class="line">            <span class="keyword">return</span> &#123;i,it-&gt;second&#125;;</span><br><span class="line">        map[nums[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h3><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0开头。</p><p>示例 1：</p><p>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len1=<span class="number">1</span>;<span class="comment">//记录l1的长度</span></span><br><span class="line">    <span class="type">int</span> len2=<span class="number">1</span>;<span class="comment">//记录l2的长度</span></span><br><span class="line">    ListNode* p1=l1;</span><br><span class="line">    ListNode* p2=l2;</span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;next != <span class="literal">nullptr</span>)<span class="comment">//获取l1的长度</span></span><br><span class="line">        &#123;</span><br><span class="line">            len1++;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(p2-&gt;next != <span class="literal">nullptr</span>)<span class="comment">//获取l2的长度</span></span><br><span class="line">        &#123;</span><br><span class="line">            len2++;</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(len1&gt;len2)<span class="comment">//l1较长，在l2末尾补零</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len1-len2;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                p2-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">                p2=p2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//l2较长，在l1末尾补零</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len2-len1;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                p1-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">                p1=p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">    p1=l1;</span><br><span class="line">    p2=l2;</span><br><span class="line">    <span class="type">bool</span> carry=<span class="literal">false</span>;<span class="comment">//记录进位</span></span><br><span class="line">    ListNode* l3=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);<span class="comment">//存放结果的链表</span></span><br><span class="line">    ListNode* p3=l3;<span class="comment">//l3的移动指针</span></span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;<span class="comment">//记录相加结果</span></span><br><span class="line">    <span class="keyword">while</span>(p1 != <span class="literal">nullptr</span> &amp;&amp; p2 != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res= carry + p1-&gt;val + p2-&gt;val;</span><br><span class="line">            p3-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(res % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(res &gt;= <span class="number">10</span>) carry= <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> carry= <span class="literal">false</span>;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">            p3=p3-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry)<span class="comment">//若最后还有进位</span></span><br><span class="line">        &#123;</span><br><span class="line">            p3-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">            p3=p3-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l3-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a><strong>3.无重复字符的最长子串</strong></h3><p>给定一个字符串 s ，请你找出其中不含有重复字符的最长子串的长度。<br>示例 1:<br>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 滑动窗口思想</span></span><br><span class="line">    unordered_set&lt;<span class="type">char</span>&gt; set;<span class="comment">// 哈希集合，记录每个字符是否出现过</span></span><br><span class="line">    <span class="type">int</span> len=s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="comment">// 右指针</span></span><br><span class="line">    <span class="type">int</span> right=<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) set.<span class="built_in">erase</span>(s[i<span class="number">-1</span>]);<span class="comment">// 左指针向右移动一格，移除一个字符</span></span><br><span class="line">        <span class="keyword">while</span>(right+<span class="number">1</span>&lt;len&amp;&amp;!set.<span class="built_in">count</span>(s[right+<span class="number">1</span>]))&#123;</span><br><span class="line">            <span class="comment">// 右指针不断移动</span></span><br><span class="line">            set.<span class="built_in">insert</span>(s[right+<span class="number">1</span>]);</span><br><span class="line">            right++;&#125;</span><br><span class="line">        <span class="comment">// 第i到right个字符是一个最长无重复字符子串</span></span><br><span class="line">        res=<span class="built_in">max</span>(res,right-i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-最长回文子串"><a href="#4-最长回文子串" class="headerlink" title="4.最长回文子串"></a>4.最长回文子串</h3><p>给你一个字符串 s，找到 s 中最长的回文子串。<br>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。<br>示例 1：<br>输入：s &#x3D; “babad”<br>输出：”bab”<br>解释：”aba” 同样是符合题意的答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">expendCenter</span><span class="params">(string s,<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"><span class="comment">//计算以left和right为中心的回文串长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> L=left;</span><br><span class="line">    <span class="type">int</span> R=right;</span><br><span class="line">    <span class="keyword">while</span>(L&gt;=<span class="number">0</span> &amp;&amp; R&lt;s.<span class="built_in">length</span>() &amp;&amp; s[R]==s[L])</span><br><span class="line">    &#123;</span><br><span class="line">        L--;</span><br><span class="line">        R++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R-L<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len=s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="comment">// 保存回文子串的起始位置</span></span><br><span class="line">    <span class="type">int</span> begin=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 保存回文子串的结束位置</span></span><br><span class="line">    <span class="type">int</span> end=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 保存回文子串的最大长度</span></span><br><span class="line">    <span class="type">int</span> maxLen=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="comment">// 一个元素为中心的情况</span></span><br><span class="line">        <span class="type">int</span> len1= <span class="built_in">expendCenter</span>(s,i,i);</span><br><span class="line">        <span class="comment">// 两个元素为中心的情况</span></span><br><span class="line">        <span class="type">int</span> len2= <span class="built_in">expendCenter</span>(s,i,i+<span class="number">1</span>);</span><br><span class="line">        maxLen=<span class="built_in">max</span>(<span class="built_in">max</span>(len1,len2),maxLen);</span><br><span class="line">        <span class="keyword">if</span>(maxLen&gt;end-begin+<span class="number">1</span>)</span><br><span class="line">        &#123;<span class="comment">// 获取最新回文子串的开始和结束位置</span></span><br><span class="line">            begin=i-(maxLen<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">            end=i+maxLen/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string res=s.<span class="built_in">substr</span>(begin,maxLen);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-盛最多水的容器"><a href="#5-盛最多水的容器" class="headerlink" title="5.盛最多水的容器"></a>5.盛最多水的容器</h3><p>给定一个长度为 n 的整数数组height。有n条垂线，第 i 条线的两个端点是(i, 0)和(i, height[i])<br>找出其中的两条线，使得它们与x轴共同构成的容器可以容纳最多的水。<br>返回容器可以储存的最大水量。<br>说明：你不能倾斜容器。<br><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg"><br>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49<br>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为49。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=height.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(height[left]&lt;height[right])</span><br><span class="line"><span class="comment">// 注意：必须是(right-left)放前面，否则在height[left++]结束后，left已经自增1了</span></span><br><span class="line">            res=<span class="built_in">max</span>(res,(right-left)*height[left++]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res=<span class="built_in">max</span>(res,(right-left)*height[right--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化两边指针，移动时无论长板或短板向中间收窄一格，都会导致水槽底边宽度-1变短：</span></span><br><span class="line"><span class="comment">// 若向内移动短板，水槽的短板min(h[left],h[right])可能变大，底边宽度-1，下个水槽面积可能增大</span></span><br><span class="line"><span class="comment">// 若向内移动长板，水槽的短板min(h[left],h[right])不变或者变小，底边宽度-1，下个水槽面积一定变小</span></span><br><span class="line"><span class="comment">// 因此，初始化双指针分列水槽左右两端，循环每轮将短板向内移动一格，并更新面积最大值，直到两指针相遇即可</span></span><br></pre></td></tr></table></figure><hr><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EvoSuite生成单元测试用例</title>
      <link href="/2023/01/07/EvoSuite/"/>
      <url>/2023/01/07/EvoSuite/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Maven中pom-xml配置"><a href="#一、Maven中pom-xml配置" class="headerlink" title="一、Maven中pom.xml配置"></a>一、Maven中pom.xml配置</h3><p>以IDEA+Maven为例：</p><p>修改maven中pom.xml文件如下（不唯一）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zjn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>EvotestDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.evosuite<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>evosuite-standalone-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>EvotestDemo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.evosuite.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>evosuite-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、使用-EvoSuite-生成测试用例的步骤"><a href="#二、使用-EvoSuite-生成测试用例的步骤" class="headerlink" title="二、使用 EvoSuite 生成测试用例的步骤"></a>二、使用 EvoSuite 生成测试用例的步骤</h3><p>将要被测试的类放置在 src&#x2F;main&#x2F;java 文件夹下</p><p>在终端窗口命令行输入如下指令： </p><p>mvn compile -DmemoryInMB&#x3D;2000 -Dcores&#x3D;2 -Dcriterion&#x3D;line:branch </p><p>-DtargetFolder&#x3D;src&#x2F;test&#x2F;java&#x2F;evosuite evosuite:generate evosuite:export</p><p>简单说明下各个参数含义：</p><p>compile 表示编译。因为 evosuite 也是基于编译后的.class 文件生成用例的， 所以需要先编译。</p><p>-DmemoryInMB&#x3D;2000 表示使用 2000MB 的内存 -Dcores&#x3D;2 表示用 2 个 cpu 来并行加快生成速度</p><p>-Dcriterion&#x3D;line:branch 表示覆盖准则选择</p><p>这里定义分支、语句覆盖准则  可以定义不止一个覆盖准则，用:隔开就行 </p><p>-DtargetFolder&#x3D;src&#x2F;test&#x2F;java&#x2F;evosuite 表示生成的用例放到 src&#x2F;test&#x2F;java&#x2F;evosuite  </p><p>evosuite:generate 表示执行生成用例 </p><p>evosuite:export 表示导出用例到 targetFolder 的值所在的目录中</p><hr><p>用时 9.846s 成功运行， EvoSuite 生成的自动测试用例，部分截图如下所示：</p><p><img src="https://s1.ax1x.com/2023/01/07/pSVQohF.png"></p><p>运行 evosuite 生成的 ArrayUtils_ESTest 测试用例, 可以成功运行，如下图所示：</p><p><img src="https://s1.ax1x.com/2023/01/07/pSVQh7V.png"></p><p><img src="https://s1.ax1x.com/2023/01/07/pSVQ5kT.png"></p><h3 id="三、一些问题"><a href="#三、一些问题" class="headerlink" title="三、一些问题"></a>三、一些问题</h3><p>从使用 Evosuite 生成测试的结果来看，会生成两份文件，ArrayUtils_ESTest.java 包含单测用例，ArrayUtils _ESTest_scaffolding.java 用例基类，用来在测试前初始化 Evosuite 的沙盒环境。这次使用的覆盖率还挺高的，两种覆盖准则（分支、语句覆盖）下都达到了100%的覆盖率。</p><p>当然，覆盖率并不代表全部，更重要的是测的内容。可以看到，有时它没有校验正常逻辑（多个用例会用来校验 null 或者非法参数，唯独缺少正常场景），而且 Evosuite 生成测试用例比较随机，有些方法显然更需要被测试，但是它可能只给了一个用例，显然不够充分。</p><p>总的来说，Evosuite 更适用于测试边界情况和异常情况，确实是能省很多力，工具生成的用例也确实有效，是有用的，在正常场景下还是人工更靠谱。 不过由于我使用时间短、对软件测试领域的了解也很有限，也不排除是我对该工具使用不熟练的原因。</p><hr><p>（Evosuite运行生成的.evosuite&#x2F;tmp_2023_01_07_19_42_43&#x2F;logs&#x2F;test&#x2F;std_out_CLIENT.log截图）</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s1.ax1x.com/2023/01/07/pSVQItU.png"></h2><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EvoSuite </tag>
            
            <tag> Maven </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最新JetBrains全家桶教育认证免费使用</title>
      <link href="/2023/01/06/jetbrains-install-free/"/>
      <url>/2023/01/06/jetbrains-install-free/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间大学生电子邮件地址一键认证通过已经被BAN了，不能以这种方式免费使用JetBrains全家桶了，但是通过官方文件申请审核还是可以的。</p><h3 id="教育认证步骤"><a href="#教育认证步骤" class="headerlink" title="教育认证步骤"></a>教育认证步骤</h3><h4 id="进入官网教育认证界面"><a href="#进入官网教育认证界面" class="headerlink" title="进入官网教育认证界面"></a>进入官网教育认证界面</h4><p>链接地址：<a href="https://www.jetbrains.com/zh-cn/community/education/#students">https://www.jetbrains.com/zh-cn/community/education/#students</a></p><p>进入界面后如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/751f6d8f894b4d4ba941351180f277a7.png" alt="在这里插入图片描述"></p><p>我们需要选择官方文件认证，步骤依次如下：</p><p><img src="https://img-blog.csdnimg.cn/d7e791474e2847899659e842885ed015.png" alt="在这里插入图片描述"></p><img src="https://img-blog.csdnimg.cn/a7915aee36a84712a0ae5a43a250ccb0.png" alt="在这里插入图片描述" style="zoom:80%;" />学术机构写你的大学<p>学术机构网站写你的大学网站</p><p>其他的就正常填写</p><h4 id="去学信网下载学籍报告"><a href="#去学信网下载学籍报告" class="headerlink" title="去学信网下载学籍报告"></a>去学信网下载学籍报告</h4><p>学信网地址：<a href="https://www.chsi.com.cn/">https://www.chsi.com.cn/</a></p><p>然后把在线验证码复制黏贴好、流程如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/41bfb85c54b7439896f230250f811234.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2f1a56aa543247b7ab699339ebfbb8e2.png" alt="在这里插入图片描述"></p><p>点击查看能看到你的验证报告，下载下来，然后就填写完毕了。</p><h4 id="成功认证免费使用结果"><a href="#成功认证免费使用结果" class="headerlink" title="成功认证免费使用结果"></a>成功认证免费使用结果</h4><p>等大概两天会收到邮箱通知，内容如下：</p><p><img src="https://img-blog.csdnimg.cn/bb2c5c0b075646b3a6c6c9371ffa92fc.png" alt="在这里插入图片描述"></p><p>到此，认证成功完成，你就可以免费用JetBrains全家桶了！应该是一两年免费，到期了再认证就行！</p><hr><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 教育认证免费用JetBrains全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JetBrains </tag>
            
            <tag> CLion </tag>
            
            <tag> IDEA </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离线中英文文字图像匹配度检测软件（基于CLIP、Transformers等实现）</title>
      <link href="/2023/01/02/text4image/"/>
      <url>/2023/01/02/text4image/</url>
      
        <content type="html"><![CDATA[<h2 id="文字图像匹配度检测软件（基于CLIP、Transformers等实现）"><a href="#文字图像匹配度检测软件（基于CLIP、Transformers等实现）" class="headerlink" title="文字图像匹配度检测软件（基于CLIP、Transformers等实现）"></a>文字图像匹配度检测软件（基于CLIP、Transformers等实现）</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>使用<strong>CLIP</strong>（对比图文预训练方法）提供的图文匹配度检测接口，使用<strong>huggingface</strong>基于<strong>Transformers</strong>的机器模型实现离线翻译，因此输入中英文均可检测。前端图形化界面使用<strong>PYQT</strong>开发,并使用了<strong>qdarkstyle</strong>进行优化，具体效果如下图所示：</li></ul><p><img src="https://img-blog.csdnimg.cn/f8fed141313948989761d7345cc9c8e7.png" alt="在这里插入图片描述"></p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><ul><li><p>左边一栏是候选文字语句，右边一栏是对应每条文字语句的匹配度（支持中英文）</p></li><li><p>点击选择图片，如为我代码中附带的数据集中的图片，那么右边第一列的第一行会附上这张图片的正确描述，如为其他图片，则可以手动输入正确描述，随机抽取中文、英文按钮会下后四行抽取干扰的中文、英文描述，<strong>所有候选的5个描述语句均可手动修改</strong>。</p></li><li><p>下面是一个例子：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/1ea588349bb54ef3bbca12c6e0450f1b.png" alt="在这里插入图片描述"></p><p>从结果可以看出，模型对于最贴合图片的那句描述是可以正确识别的，而且效果很好，支持中英文，我自己也做了很多实验测试，代码中也有评估模型准确度的代码testCode.py</p><h3 id="部分代码："><a href="#部分代码：" class="headerlink" title="部分代码："></a>部分代码：</h3><p>主体代码如下，其余代码以及requirements.txt等打包放在<a href="https://download.csdn.net/download/Constantiny/87357710?spm=1001.2014.3001.5503">我的资源</a>中，可以下载并配置好相关环境后运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;txtimgui.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.15.4</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QFileDialog</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> translate_main</span><br><span class="line"><span class="keyword">import</span> clip</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"><span class="keyword">global</span> imgNamePath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPicName</span>(<span class="params">myLine</span>):</span><br><span class="line">    resName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;#enc#0 &quot;</span> <span class="keyword">in</span> myLine:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#enc#0 &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;#zhc#1 &quot;</span> <span class="keyword">in</span> myLine:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#zhc#1 &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#zhc#0 &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> resName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPicSentence</span>(<span class="params">myLine</span>):</span><br><span class="line">    resName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;#enc#0 &quot;</span> <span class="keyword">in</span> myLine:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#enc#0 &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;#zhc#1 &quot;</span> <span class="keyword">in</span> myLine:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#zhc#1 &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#zhc#0 &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> resName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_MainWindow</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, MainWindow</span>):</span><br><span class="line">        MainWindow.setObjectName(<span class="string">&quot;MainWindow&quot;</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">        MainWindow.setMinimumSize(QtCore.QSize(<span class="number">80</span>, <span class="number">30</span>))</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">&quot;centralwidget&quot;</span>)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton.setGeometry(QtCore.QRect(<span class="number">30</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">31</span>))</span><br><span class="line">        self.pushButton.setObjectName(<span class="string">&quot;pushButton&quot;</span>)</span><br><span class="line">        self.pushButton.clicked.connect(self.openImage)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">40</span>, <span class="number">160</span>, <span class="number">241</span>, <span class="number">271</span>))</span><br><span class="line">        self.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)</span><br><span class="line">        self.lineEdit.setGeometry(QtCore.QRect(<span class="number">120</span>, <span class="number">90</span>, <span class="number">181</span>, <span class="number">31</span>))</span><br><span class="line">        self.lineEdit.setObjectName(<span class="string">&quot;lineEdit&quot;</span>)</span><br><span class="line">        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton_2.setGeometry(QtCore.QRect(<span class="number">374</span>, <span class="number">362</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        self.pushButton_2.setObjectName(<span class="string">&quot;pushButton_2&quot;</span>)</span><br><span class="line">        self.pushButton_2.clicked.connect(self.randomExtract)</span><br><span class="line">        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton_3.setGeometry(QtCore.QRect(<span class="number">514</span>, <span class="number">362</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        self.pushButton_3.setObjectName(<span class="string">&quot;pushButton_3&quot;</span>)</span><br><span class="line">        self.pushButton_3.clicked.connect(self.matching)</span><br><span class="line">        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton_5.setGeometry(QtCore.QRect(<span class="number">374</span>, <span class="number">462</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        self.pushButton_5.setObjectName(<span class="string">&quot;pushButton_5&quot;</span>)</span><br><span class="line">        self.pushButton_5.clicked.connect(self.randomExtractEn)</span><br><span class="line">        self.widget = QtWidgets.QWidget(self.centralwidget)</span><br><span class="line">        self.widget.setGeometry(QtCore.QRect(<span class="number">310</span>, <span class="number">100</span>, <span class="number">331</span>, <span class="number">221</span>))</span><br><span class="line">        self.widget.setObjectName(<span class="string">&quot;widget&quot;</span>)</span><br><span class="line">        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)</span><br><span class="line">        self.verticalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.verticalLayout.setObjectName(<span class="string">&quot;verticalLayout&quot;</span>)</span><br><span class="line">        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_2.setMinimumSize(QtCore.QSize(<span class="number">100</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_2.setObjectName(<span class="string">&quot;lineEdit_2&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_2)</span><br><span class="line">        self.lineEdit_3 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_3.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_3.setObjectName(<span class="string">&quot;lineEdit_3&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_3)</span><br><span class="line">        self.lineEdit_4 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_4.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_4.setObjectName(<span class="string">&quot;lineEdit_4&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_4)</span><br><span class="line">        self.lineEdit_5 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_5.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_5.setObjectName(<span class="string">&quot;lineEdit_5&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_5)</span><br><span class="line">        self.lineEdit_6 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_6.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_6.setObjectName(<span class="string">&quot;lineEdit_6&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_6)</span><br><span class="line">        self.widget1 = QtWidgets.QWidget(self.centralwidget)</span><br><span class="line">        self.widget1.setGeometry(QtCore.QRect(<span class="number">650</span>, <span class="number">100</span>, <span class="number">135</span>, <span class="number">221</span>))</span><br><span class="line">        self.widget1.setObjectName(<span class="string">&quot;widget1&quot;</span>)</span><br><span class="line">        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget1)</span><br><span class="line">        self.verticalLayout_2.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.verticalLayout_2.setObjectName(<span class="string">&quot;verticalLayout_2&quot;</span>)</span><br><span class="line">        self.lineEdit_7 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_7.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_7.setObjectName(<span class="string">&quot;lineEdit_7&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_7)</span><br><span class="line">        self.lineEdit_8 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_8.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_8.setObjectName(<span class="string">&quot;lineEdit_8&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_8)</span><br><span class="line">        self.lineEdit_9 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_9.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_9.setObjectName(<span class="string">&quot;lineEdit_9&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_9)</span><br><span class="line">        self.lineEdit_10 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_10.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_10.setObjectName(<span class="string">&quot;lineEdit_10&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_10)</span><br><span class="line">        self.lineEdit_11 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_11.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_11.setObjectName(<span class="string">&quot;lineEdit_11&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_11)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">&quot;statusbar&quot;</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> imgNamePath</span><br><span class="line">        <span class="comment"># 这里为了方便别的地方引用图片路径，将其设置为全局变量</span></span><br><span class="line">        <span class="comment"># 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型</span></span><br><span class="line">        <span class="comment"># QFileDialog就是系统对话框的那个类第一个参数是上下文，第二个参数是弹框的名字，第三个参数是默认打开的路径，第四个参数是需要的格式</span></span><br><span class="line">        <span class="comment"># 设置try-except防止各种不符合要求的操作导致软件退出</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            imgNamePath, imgType = QFileDialog.getOpenFileName(self.centralwidget, <span class="string">&quot;选择图片&quot;</span>,</span><br><span class="line">                                                               <span class="string">&#x27;./dataset&#x27;</span>,</span><br><span class="line">                                                               <span class="string">&quot;*.jpg;;*.png;;All Files(*)&quot;</span>)</span><br><span class="line">            <span class="comment"># 通过文件路径获取图片文件，并设置图片长宽为label控件的长、宽</span></span><br><span class="line">            img = QtGui.QPixmap(imgNamePath).scaled(self.label.width(), self.label.height())</span><br><span class="line">            <span class="comment"># 在label控件上显示选择的图片</span></span><br><span class="line">            self.label.setPixmap(img)</span><br><span class="line">        <span class="comment"># 显示所选图片的路径</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># print(imgNamePath)</span></span><br><span class="line">        self.lineEdit.setText(imgNamePath)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resPath = imgNamePath.split(<span class="string">&#x27;image/&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 卫星</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;./dataset/militray_label.txt&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> getPicName(line) == resPath:</span><br><span class="line">                <span class="built_in">print</span>(line)</span><br><span class="line">                self.lineEdit_2.setText(getPicSentence(line))</span><br><span class="line">        <span class="comment"># 中文</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;./dataset/ch_label.txt&quot;</span>, encoding=<span class="string">&#x27;GBK&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> getPicName(line) == resPath:</span><br><span class="line">                <span class="built_in">print</span>(line)</span><br><span class="line">                self.lineEdit_2.setText(getPicSentence(line))</span><br><span class="line">        <span class="comment"># 英文</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;./dataset/enc_label.txt&quot;</span>, encoding=<span class="string">&#x27;GBK&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> getPicName(line) == resPath:</span><br><span class="line">                <span class="built_in">print</span>(line)</span><br><span class="line">                self.lineEdit_2.setText(getPicSentence(line))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomExtract</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 随机抽取 图片名字和对应正确描述构成映射 读图片的时候把正确的那句话也放到第一个框里</span></span><br><span class="line">        r1 = random.randint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">        r2 = random.randint(<span class="number">21</span>, <span class="number">30</span>)</span><br><span class="line">        r3 = random.randint(<span class="number">31</span>, <span class="number">39</span>)</span><br><span class="line">        r4 = random.randint(<span class="number">40</span>, <span class="number">49</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;./dataset/militray_label.txt&quot;</span>, encoding=<span class="string">&#x27;utf=8&#x27;</span>)</span><br><span class="line">        resList = []</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            lines = f.readlines(<span class="number">10000</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lines:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                resList.append(getPicSentence(line))</span><br><span class="line">        <span class="built_in">print</span>(resList[r1], resList[r2], resList[r3], resList[r4])</span><br><span class="line">        self.lineEdit_3.setText(resList[r1])</span><br><span class="line">        self.lineEdit_4.setText(resList[r2])</span><br><span class="line">        self.lineEdit_5.setText(resList[r3])</span><br><span class="line">        self.lineEdit_6.setText(resList[r4])</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomExtractEn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 随机抽取英文 图片名字和对应正确描述构成映射  读图片的时候把正确的那句话也放到第一个框里</span></span><br><span class="line">        r1 = random.randint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">        r2 = random.randint(<span class="number">21</span>, <span class="number">30</span>)</span><br><span class="line">        r3 = random.randint(<span class="number">31</span>, <span class="number">39</span>)</span><br><span class="line">        r4 = random.randint(<span class="number">40</span>, <span class="number">49</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;./dataset/militray_enc_label.txt&quot;</span>, encoding=<span class="string">&#x27;utf=8&#x27;</span>)</span><br><span class="line">        resList = []</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            lines = f.readlines(<span class="number">10000</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lines:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                resList.append(getPicSentence(line))</span><br><span class="line">        <span class="built_in">print</span>(resList[r1], resList[r2], resList[r3], resList[r4])</span><br><span class="line">        self.lineEdit_3.setText(resList[r1])</span><br><span class="line">        self.lineEdit_4.setText(resList[r2])</span><br><span class="line">        self.lineEdit_5.setText(resList[r3])</span><br><span class="line">        self.lineEdit_6.setText(resList[r4])</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">matching</span>(<span class="params">self</span>):</span><br><span class="line">        t1 = self.lineEdit_2.text()</span><br><span class="line">        t2 = self.lineEdit_3.text()</span><br><span class="line">        t3 = self.lineEdit_4.text()</span><br><span class="line">        t4 = self.lineEdit_5.text()</span><br><span class="line">        t5 = self.lineEdit_6.text()</span><br><span class="line">        s1, s2, s3, s4, s5 = translate_main.trans(t1, t2, t3, t4, t5)</span><br><span class="line">        device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">        model, preprocess = clip.load(<span class="string">&quot;ViT-B/32&quot;</span>, device=device)</span><br><span class="line">        <span class="keyword">global</span> imgNamePath</span><br><span class="line">        image = preprocess(Image.<span class="built_in">open</span>(imgNamePath)).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">        text = clip.tokenize([<span class="built_in">str</span>(s1), <span class="built_in">str</span>(s2), <span class="built_in">str</span>(s3), <span class="built_in">str</span>(s4), <span class="built_in">str</span>(s5)]).to(device)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            image_features = model.encode_image(image)</span><br><span class="line">            text_features = model.encode_text(text)</span><br><span class="line">            logits_per_image, logits_per_text = model(image, text)</span><br><span class="line">            probs = logits_per_image.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;文本图像匹配度：&quot;</span>, probs)  <span class="comment"># prints: [[0.9927937  0.00421068 0.00299572]]</span></span><br><span class="line">            prob = <span class="built_in">str</span>(probs)[<span class="number">2</span>:-<span class="number">2</span>]</span><br><span class="line">            <span class="built_in">print</span>(prob)</span><br><span class="line">            t1, t2, t3, t4, t5 = prob.split()</span><br><span class="line">            <span class="comment"># 格式化输出 更好看</span></span><br><span class="line">            <span class="comment"># 使用python内置的round（）函数</span></span><br><span class="line">            <span class="comment"># a = 1.1314 a = 1.0000 a = 1.1267</span></span><br><span class="line">            <span class="comment"># b = round（a.2）b = round（a.2）b = round（a.2）</span></span><br><span class="line">            <span class="comment"># output b = 1.13 output b = 1.0 output b = 1.13</span></span><br><span class="line">            t1 = <span class="built_in">round</span>(<span class="built_in">float</span>(t1), <span class="number">4</span>)</span><br><span class="line">            t2 = <span class="built_in">round</span>(<span class="built_in">float</span>(t2), <span class="number">4</span>)</span><br><span class="line">            t3 = <span class="built_in">round</span>(<span class="built_in">float</span>(t3), <span class="number">4</span>)</span><br><span class="line">            t4 = <span class="built_in">round</span>(<span class="built_in">float</span>(t4), <span class="number">4</span>)</span><br><span class="line">            t5 = <span class="built_in">round</span>(<span class="built_in">float</span>(t5), <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">print</span>(t1, t2, t3, t4, t5)</span><br><span class="line">            self.lineEdit_7.setText(<span class="built_in">str</span>(t1))</span><br><span class="line">            self.lineEdit_8.setText(<span class="built_in">str</span>(t2))</span><br><span class="line">            self.lineEdit_9.setText(<span class="built_in">str</span>(t3))</span><br><span class="line">            self.lineEdit_10.setText(<span class="built_in">str</span>(t4))</span><br><span class="line">            self.lineEdit_11.setText(<span class="built_in">str</span>(t5))</span><br><span class="line">            <span class="comment"># 下面为记录每次运行的结果</span></span><br><span class="line">            <span class="comment"># 英文测试</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./testResult/enTestResult.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> writers:</span><br><span class="line">                <span class="comment"># 中文测试</span></span><br><span class="line">                <span class="comment"># with open(&#x27;./testResult/testResult.txt&#x27;, &#x27;a+&#x27;) as writers:</span></span><br><span class="line">                <span class="comment"># 打开文件 ‘a+’ ==a+r（可追加可写，文件若不存在就创建）</span></span><br><span class="line">                <span class="keyword">if</span> t1 &gt; <span class="number">0.5</span>:</span><br><span class="line">                    a = imgNamePath</span><br><span class="line">                    b = t1</span><br><span class="line">                    c = <span class="string">&#x27;True&#x27;</span></span><br><span class="line">                    <span class="comment"># 如果要按行写入，我们只需要再字符串开头或结尾添加换行符&#x27;\n&#x27;</span></span><br><span class="line">                    <span class="comment"># writers.write(a + &#x27;\n&#x27;)</span></span><br><span class="line">                    <span class="comment"># 如果想要将多个变量同时写入一行中，可以使用writelines()函数,</span></span><br><span class="line">                    <span class="comment"># 要求将传入的变量写成一个list：</span></span><br><span class="line">                    <span class="comment"># writers.write(&#x27;\n&#x27;)</span></span><br><span class="line">                    <span class="comment"># writers.writelines([str(a), &#x27;,&#x27;, str(b), &#x27;,&#x27;, str(c)])</span></span><br><span class="line">                    writers.write(<span class="built_in">str</span>(a) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(b) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(c) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res = <span class="string">&#x27;False&#x27;</span></span><br><span class="line">                    writers.write(res + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment"># return t1, t2, t3, t4, t5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, MainWindow</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;文字图像匹配度检测&quot;</span>))</span><br><span class="line">        self.pushButton.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;选择图片&quot;</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>,</span><br><span class="line">                                      <span class="string">&quot;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=\&quot; font-size:14pt; font-weight:600;\&quot;&gt;图文匹配&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>))</span><br><span class="line">        self.pushButton_2.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;随机抽取中文&quot;</span>))</span><br><span class="line">        self.pushButton_3.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;开始检测&quot;</span>))</span><br><span class="line">        self.pushButton_5.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;随机抽取英文&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 多模态项目 </category>
          
          <category> 图文匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyqt5 </tag>
            
            <tag> Pytorch </tag>
            
            <tag> CLIP </tag>
            
            <tag> Python </tag>
            
            <tag> Transformers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win下pytorch-gpu版本安装</title>
      <link href="/2023/01/01/pytorch-gpu-install/"/>
      <url>/2023/01/01/pytorch-gpu-install/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>Pytorch</strong>的安装相对于<strong>tensorflow</strong>还是简单很多的。现在安装pytorch也可以不用提前安装</p><p>CUDA和cudnn，因为当你安装torch时会帮你安装cuda训练时需要的东西。只需要提前安装驱动，</p><p>安装完nvidia驱动后直接进行GPU版pytorch的安装。相对来说入门简单，封装少，简洁高效快速。</p><p>像tensorflow各种版本语法不同，与其他python库版本不兼容等问题pytorch会相对来说更少出现。</p><p>它是一个开源的Python机器学习库，基于Torch，用于自然语言处理等应用程序。</p><p>2017年1月，由Facebook人工智能研究院（FAIR）基于Torch推出了PyTorch。</p><p>它是一个基于Python的可续计算包，提供两个高级功能：</p><p>1、具有强大的GPU加速的张量计算（如NumPy）。</p><p>2、包含自动求导系统的深度神经网络。</p><p>PyTorch的前身是Torch，其底层和Torch框架一样，但是使用Python重新写了很多内容，不仅更加灵</p><p>活，支持动态图，而且提供了Python接口。它是由Torch7团队开发，是一个以Python优先的深度学</p><p>习框架，不仅能够实现强大的GPU加速，同时还支持动态神经网络，这是很多主流深度学习框架比如</p><p>Tensorflow等都不支持的。PyTorch 既可以看作加入了GPU支持的numpy，同时也可以看成一个拥有</p><p>自动求导功能的强大的深度神经网络 。</p><h3 id="一、首先，打开Anaconda-Prompt-创建一个环境"><a href="#一、首先，打开Anaconda-Prompt-创建一个环境" class="headerlink" title="一、首先，打开Anaconda Prompt 创建一个环境"></a>一、首先，打开Anaconda Prompt 创建一个环境</h3><p>如下图所示，以python&#x3D;3.7版本为例，conda名字为torch，输入命令：</p><p>conda creata -n torch python&#x3D;3.7</p><p><img src="https://s1.ax1x.com/2023/01/01/pSCy7lT.png"></p><h3 id="二、安装pytorch-GPU版本"><a href="#二、安装pytorch-GPU版本" class="headerlink" title="二、安装pytorch GPU版本"></a>二、安装pytorch GPU版本</h3><h4 id="（1）进入pytorch的官网"><a href="#（1）进入pytorch的官网" class="headerlink" title="（1）进入pytorch的官网"></a>（1）进入pytorch的官网</h4><p><a href="https://pytorch.org/">https://pytorch.org/</a></p><p>选择Stable、Windows、pip（一般来说pip会比conda安装的速度更快）、python、CUDA版本（不能高于你显卡驱动所支持的最高版本，显卡驱动所支持的最高版本查看方法见tensorflow-gpu安装的文章）</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6u1f.png"></p><h4 id="（2）执行安装命令"><a href="#（2）执行安装命令" class="headerlink" title="（2）执行安装命令"></a>（2）执行安装命令</h4><p>将生成的命令复制黏贴到你刚刚创建的conda环境中运行。</p><p>（如果速度<strong>慢</strong>就把后面的官方网址换成 <strong>-i 镜像源</strong>）</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6eht.png"></p><h4 id="（3）检查是否安装成功"><a href="#（3）检查是否安装成功" class="headerlink" title="（3）检查是否安装成功"></a>（3）检查是否安装成功</h4><p>在Anaconda Prompt中进入你刚刚创建的conda环境，依次输入命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><p>运行效果如下图所示：</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6lng.png"></p><p>表明成功安装pytorch的GPU版本，结束。</p><hr><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境配置 </category>
          
          <category> pytorch-gpu-install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> GPU </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win下tensorflow-gpu安装(tf2.5+CUDA11.2+cuDNN8.1.1)</title>
      <link href="/2022/12/31/tensorflow-install/"/>
      <url>/2022/12/31/tensorflow-install/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>windows，anaconda，pycharm, python3.7</strong></p><p>显卡3070ti laptop</p><h3 id="一、版本对应关系"><a href="#一、版本对应关系" class="headerlink" title="一、版本对应关系"></a>一、版本对应关系</h3><p>一定要先根据自己电脑的显卡、显卡驱动版本、python版本、tensorflow版本，去匹配对应的CUDA和cuDNN版本。各版本并非完全唯一对应，而是有一定的范围区间。官网上的对应关系图如下：按照这个来没错</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yPHA.png" alt="tf"></p><h3 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h3><h4 id="1-首先，查看自己电脑显卡所能支持的最高CUDA版本"><a href="#1-首先，查看自己电脑显卡所能支持的最高CUDA版本" class="headerlink" title="1.首先，查看自己电脑显卡所能支持的最高CUDA版本"></a>1.首先，查看自己电脑显卡所能支持的最高CUDA版本</h4><p>（1）cmd输入nividia-smi</p><p>如下图所示，涂黄色部分就表明电脑显卡所能支持的最高CUDA版本，你安装的CUDA版本不能高于此</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yZ38.png"></p><p>（2）右键桌面栏右下角的nvidia图标，点击NVIDIA控制面板</p><p>进入界面后点击左下角系统信息，再在系统信息页面点击组件一栏，如下图所示： 3D设置第三行NVCUDA64.DLL的产品名称中的CUDA版本就表明你电脑显卡所能支持的最高CUDA版本。</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9ytvF.png"></p><h4 id="2-安装对应版本CUDA和cudnn（以CUDA11-2-cuDNN8-1-1为例）"><a href="#2-安装对应版本CUDA和cudnn（以CUDA11-2-cuDNN8-1-1为例）" class="headerlink" title="2.安装对应版本CUDA和cudnn（以CUDA11.2+cuDNN8.1.1为例）"></a>2.安装对应版本CUDA和cudnn（以CUDA11.2+cuDNN8.1.1为例）</h4><p><strong>（1）CUDA</strong></p><p>下载地址：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>进入页面，选择你所需版本CUDA 一般来说xx.x.非0好一点</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yT8f.png"></p><p>依次选择 WINDOWS、x86_64、10、exe(local)</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yLrQ.png"></p><p>点击下载即可，文件大概2-3G。</p><p>点击刚才下载的CUDA安装包，管理员身份运行，点击”OK”</p><p>一路继续，然后选择”自定义安装”，当前版本比新版本高的就不要打勾！</p><p><img src="https://s1.ax1x.com/2022/12/31/pS96iMF.png"></p><p>点击”下一步” ，一路继续，选择安装位置默认的就行，有三个路径可以截图。</p><p>一路下一步，安装完成。</p><p><strong>验证是否安装成功：</strong></p><p>打开CMD输入： nvcc -V </p><p>下图为成功图片</p><p><img src="https://s1.ax1x.com/2022/12/31/pS968Zd.png"></p><p>安装成功后，环境变量里面系统自动添加CUDA_PATH和CUDA_PATH_V11_2路径，这样就可以运行了，更完美可以按下列步骤补全环境变量。</p><p>配置环境变量</p><p>1、确认系统变量中：CUDA_PATH和CUDA_PATH_V11.2已经存在</p><p>2、我们还需要在环境变量中添加如下几个变量：</p><p>CUDA_SDK_PATH &#x3D; C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.2</p><p>CUDA_SDK_BIN_PATH &#x3D; %CUDA_SDK_PATH%\bin\win64</p><p>CUDA_SDK_LIB_PATH &#x3D; %CUDA_SDK_PATH%\common\lib\x64</p><p><strong>（2）cudnn</strong></p><p>cudnn需要注册英伟达账户才能下载，但是也不费事，一个邮箱的问题。</p><p>从官网<a href="https://developer.nvidia.com/rdp/cudnn-archive%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84cudnn">https://developer.nvidia.com/rdp/cudnn-archive下载对应版本的cudnn</a></p><p><img src="https://s1.ax1x.com/2022/12/31/pS96yon.png"></p><p>找对应版本的cudnn 下载。</p><p>！！！</p><p>解压后，把里面cudnn中的的<strong>include，lib，bin</strong>文件夹里面的所有文件分别的、对应的、<strong>复制到</strong></p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2文件<strong>对应的include，lib，bin文件里面</strong>！这样才可以GPU加速！</p><p>！！！</p><p><img src="https://s1.ax1x.com/2022/12/31/pS96hyF.png"></p><p>至此，CUDA和cudnn 安装结束。</p><h4 id="3-安装对应版本tensorflow-gpu-2-5为例"><a href="#3-安装对应版本tensorflow-gpu-2-5为例" class="headerlink" title="3.安装对应版本tensorflow-gpu(2.5为例)"></a>3.安装对应版本tensorflow-gpu(2.5为例)</h4><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.5</span><br></pre></td></tr></table></figure><p>如果速度慢可以加上 -i 镜像源</p><p>安装完成后</p><p>输入pip list： 可以看到安装的tensorflow-gpu&#x3D;&#x3D;2.5.3</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9cPYt.png"></p><p>至此，安装结束，tensorflow-gpu环境搭建完成。</p><h3 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h3><p>如果你按照以上步骤下来还是不能正常运行，那么可能有两个原因：</p><h4 id="（1）CUDA版本过高"><a href="#（1）CUDA版本过高" class="headerlink" title="（1）CUDA版本过高"></a>（1）CUDA版本过高</h4><p>匹配兼容性问题，换一个低版本的CUDA，然后安装对应版本的cudnn和tensorflow-gpu</p><h4 id="（2）电脑没有C-环境"><a href="#（2）电脑没有C-环境" class="headerlink" title="（2）电脑没有C++环境"></a>（2）电脑没有C++环境</h4><p>一般现在的电脑出厂好像都有C++环境，如下图所示：</p><p><img src="https://s1.ax1x.com/2022/12/31/pSCpdUJ.png"></p><p>如果你的电脑没有C++环境的话，可以安装安装Visual Studio 2015 C++环境，或者VS2017，或者VS2019</p><p>（经验建议不要太高版本，因为Visual Studio的驱动和编译器可能与CUDA版本不匹配而出现问题）</p><p><strong>CUDA11.2 只支持2017，2019</strong></p><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境配置 </category>
          
          <category> tensorflow-gpu-install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GPU </tag>
            
            <tag> tensorflow </tag>
            
            <tag> CUDA </tag>
            
            <tag> cudnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip配置国内源</title>
      <link href="/2022/12/31/Pip/"/>
      <url>/2022/12/31/Pip/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pip默认都是从国外的数据源下载，因此有时候会面临下载速度慢，甚至无法下载。因此，需要一个国内源来下载，速度会快很多，国内源有时候也会抽风，一个镜像源不行就换另一个源，不要在一棵树上吊死。按经验来说，国内一般pip install比conda install要快和稳定，即使conda换了镜像源。推荐使用一次性使用，不设置永久，万一那天某个镜像源抽风还要改配置文件。</p><h2 id="常用国内源"><a href="#常用国内源" class="headerlink" title="常用国内源"></a>常用国内源</h2><p><strong>清华大学</strong>  <code>https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p><strong>中国科技大学</strong> <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></p><p><strong>阿里云</strong> <code>http://mirrors.aliyun.com/pypi/simple/</code></p><p><strong>豆瓣</strong> <code>http://pypi.douban.com/simple/</code></p><h3 id="一次性使用"><a href="#一次性使用" class="headerlink" title="一次性使用"></a>一次性使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx -i http://pypi.douban.com/simple/ </span><br></pre></td></tr></table></figure><p>提示不信任则使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com </span><br></pre></td></tr></table></figure><p>再有问题就更新pip安装版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境配置 </category>
          
          <category> pip镜像源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> 镜像源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CLIP（对比图文预训练方法）实现以文本精准搜图</title>
      <link href="/2022/12/30/txt2img/"/>
      <url>/2022/12/30/txt2img/</url>
      
        <content type="html"><![CDATA[<h2 id="基于CLIP（对比图文预训练方法）实现以文本精准搜图"><a href="#基于CLIP（对比图文预训练方法）实现以文本精准搜图" class="headerlink" title="基于CLIP（对比图文预训练方法）实现以文本精准搜图"></a>基于CLIP（对比图文预训练方法）实现以文本精准搜图</h2><p>在使用<a href="https://so.csdn.net/so/search?q=CLIP&spm=1001.2101.3001.7020">CLIP</a>做图文匹配时，发现只能用多个文本语句和一张图片匹配，而我想实现多个图片与文本进行匹配。</p><p><img src="https://img-blog.csdnimg.cn/f3e1f911b5e144aab584832e735d6b06.png" alt="CLIP"></p><p>然后我打个断点  用DEBUG看了下具体的模型运行过程</p><p>在经过预处理和模型后 logits_per_image以及logits_per_text的</p><p>tensor([[25.5625, 20.0938, 19.7500]], device&#x3D;’cuda:0’, dtype&#x3D;torch.float16)</p><p>我推测这三个float数值分别代表了这三个文本与一张图片的匹配程度，而最后的probs &#x3D; logits_per_image.softmax(dim&#x3D;-1).cpu().numpy()</p><p>也只是使用 softmax层进行一些权重、对数等变换处理下变成更规范的格式<br>再使用仅仅第一个语句与该图片匹配，tensor中数值仍为25.5625<br>所以验证猜想成立在经过model（image，text）时就已经确定图文匹配度的具体相关值。</p><p><img src="https://img-blog.csdnimg.cn/c1f219cf7820431ea4d5de02e9f6ebb0.png" alt="##"></p><p>将获得图文匹配度封装成函数，并返回匹配度的数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">str1,sent</span>):</span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    model, preprocess = clip.load(<span class="string">&quot;ViT-B/32&quot;</span>, device=device)</span><br><span class="line">    image = preprocess(Image.<span class="built_in">open</span>(str1)).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">    text = clip.tokenize([sent]).to(device)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        image_features = model.encode_image(image)</span><br><span class="line">        text_features = model.encode_text(text)</span><br><span class="line">        logits_per_image, logits_per_text = model(image, text)</span><br><span class="line">        similarity = <span class="built_in">str</span>(logits_per_image)[<span class="number">9</span>:<span class="number">13</span>]</span><br><span class="line">        res = <span class="built_in">int</span>(similarity)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>利用for循环，使用字典构建键值对存放多张图片的绝对路径和图文匹配度，并进行图文匹配度排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;...............................................&#x27;</span></span><br><span class="line">sent = <span class="built_in">input</span>(<span class="string">&quot;请输入图片关键词：&quot;</span>)</span><br><span class="line">   getPic(sent)</span><br><span class="line">   <span class="comment">#获取图片</span></span><br><span class="line">   path0 =<span class="string">&#x27;C:\\Users\\DELL\\Desktop\\CLIP-main\\&#x27;</span>+ sent</span><br><span class="line">   similar_key = []</span><br><span class="line">   similar_value = []</span><br><span class="line">   <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path0):</span><br><span class="line">       <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;jpg&#x27;</span>) <span class="keyword">or</span> filename.endswith(<span class="string">&#x27;png&#x27;</span>):</span><br><span class="line">           <span class="comment">#存储图片的文件夹绝对路径</span></span><br><span class="line">           str1 = path0 +<span class="string">&#x27;\\&#x27;</span>+filename</span><br><span class="line">           similar_key.append(str1)</span><br><span class="line">           sim = <span class="keyword">match</span>(str1,sent)</span><br><span class="line">           <span class="comment">#将得到的多张图片匹配你输入的图片关键词</span></span><br><span class="line">           similar_value.append(sim)</span><br><span class="line">   <span class="comment"># 存放图片绝对路径和图文相似度的字典</span></span><br><span class="line">   similar_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(similar_key, similar_value))</span><br><span class="line">   <span class="built_in">print</span>(similar_dict)</span><br><span class="line">   similar_value.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">   <span class="built_in">print</span>(similar_value)</span><br><span class="line">   result = <span class="string">&#x27; &#x27;</span></span><br><span class="line">   <span class="comment"># 找到图文相似度最高的那个图片的绝对路径</span></span><br><span class="line">   <span class="keyword">for</span> key, value <span class="keyword">in</span> similar_dict.items():</span><br><span class="line">       <span class="keyword">if</span> value == similar_value[<span class="number">0</span>]:</span><br><span class="line">           result = key</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">   img = Image.<span class="built_in">open</span>(result)</span><br><span class="line">   img.show()</span><br></pre></td></tr></table></figure><p>执行完程序显示出最匹配你需求的那张图片。</p><p>还可以用pyqt做一个界面，这样更好用，我打包了一下软件代码。</p><p><a href="https://download.csdn.net/download/Constantiny/86511028?spm=1001.2014.3001.5503 "> 代码下载 </a></p><p>前置的爬虫抓取图片并存储路径的步骤不做介绍。</p><p><img src="https://img-blog.csdnimg.cn/f39ff56c396c4fd6bcf90e81b523c289.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/936149af80e34dcf86911f08a316be18.png" alt="在这里插入图片描述"></p><p>作者也是小白，如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 多模态项目 </category>
          
          <category> 以文搜图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyqt5 </tag>
            
            <tag> Pytorch </tag>
            
            <tag> CLIP </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
